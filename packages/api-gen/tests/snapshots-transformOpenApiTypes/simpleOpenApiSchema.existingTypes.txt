[
  [
    "Without",
    "type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };",
  ],
  [
    "XOR",
    "type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;",
  ],
  [
    "OneOf",
    "type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
    ? OneOf<[XOR<A, B>, ...Rest]>
    : never;",
  ],
  [
    "GenericRecord",
    "type GenericRecord =
  | never
  | null
  | string
  | string[]
  | number
  | { [key: string]: GenericRecord };",
  ],
]